/*
 * This file is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <AP_HAL/AP_HAL.h>

#if CONFIG_HAL_BOARD == HAL_BOARD_ESP32

#include "HAL_ESP32_Class.h"
#include <AP_HAL_Empty/AP_HAL_Empty_Private.h>
#include <AP_HAL_ESP32/AP_HAL_ESP32_Private.h>
#include <AP_BoardConfig/AP_BoardConfig.h>
#include <AP_InternalError/AP_InternalError.h>

#ifndef HAL_BOOTLOADER_BUILD
#include <AP_Logger/AP_Logger.h>
#endif
#include <AP_Vehicle/AP_Vehicle_Type.h>

//  autogenerated hwdef .h
#include <hwdef.h>

// common free-rtos headers..
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_system.h"
#include "soc/rtc_wdt.h"
#include "esp_int_wdt.h"  //Interrupt Watchdog Timer
#include "esp_task_wdt.h" //Task Watchdog Timer (TWDT)

#ifndef HAL_NO_UARTDRIVER
static ESP32::UARTDriver uartADriver(0);// cons, real uarts need a idx to attach to, wifi doesn't
static Empty::UARTDriver uartBDriver; //egads, uartBDriver is the port that ardupilot probes for a GPS on.

static ESP32::WiFiDriver uartCDriver; //lets try for tcp/mavlink on uart 'C'. tcp, client should connect to 192.168.4.1 port 5760
static ESP32::WiFiUdpDriver uartDDriver; //udp

static Empty::UARTDriver uartEDriver;
static Empty::UARTDriver uartFDriver;
static Empty::UARTDriver uartGDriver;
static Empty::UARTDriver uartHDriver;
static Empty::UARTDriver uartIDriver;
static Empty::UARTDriver uartJDriver;
#else
static Empty::UARTDriver uartADriver;
static Empty::UARTDriver uartBDriver;
static Empty::UARTDriver uartCDriver;
static Empty::UARTDriver uartDDriver;
static Empty::UARTDriver uartEDriver;
static Empty::UARTDriver uartFDriver;
static Empty::UARTDriver uartGDriver;
static Empty::UARTDriver uartHDriver;
static Empty::UARTDriver uartIDriver;
static Empty::UARTDriver uartJDriver;
#endif




#if HAL_USE_I2C == TRUE && defined(HAL_I2C_DEVICE_LIST)
static ESP32::I2CDeviceManager i2cDeviceManager;
#else
static Empty::I2CDeviceManager i2cDeviceManager;
#endif

#if HAL_USE_SPI == TRUE
static ESP32::SPIDeviceManager spiDeviceManager;
#else
static Empty::SPIDeviceManager spiDeviceManager;
#endif

#if HAL_USE_ADC == TRUE && !defined(HAL_DISABLE_ADC_DRIVER)
static ESP32::AnalogIn analogIn;
#else
static Empty::AnalogIn analogIn;
#endif

#ifdef HAL_USE_EMPTY_STORAGE
static Empty::Storage storageDriver;
#else
static ESP32::Storage storageDriver;
#endif

static Empty::GPIO gpioDriver;
//static ESP32::GPIO gpioDriver; todo
static ESP32::RCInput rcinDriver;

#if HAL_USE_PWM == TRUE
static ESP32::RCOutput rcoutDriver;
#else
static Empty::RCOutput rcoutDriver;
#endif

static ESP32::Scheduler schedulerInstance;
static ESP32::Util utilInstance;
static Empty::OpticalFlow opticalFlowDriver;

#if AP_SIM_ENABLED
static AP_HAL::SIMState xsimstate;
#endif

#if HAL_WITH_DSP
//static ESP32::DSP dspDriver;
static Empty::DSP dspDriver;

#else
static Empty::DSP dspDriver;
#endif

#ifndef HAL_NO_FLASH_SUPPORT
//static ESP32::Flash flashDriver;
static Empty::Flash flashDriver;
#else
static Empty::Flash flashDriver;
#endif

#if HAL_NUM_CAN_IFACES > 0
static ESP32::CANIface* canDrivers[HAL_NUM_CAN_IFACES];
#endif

#if HAL_USE_WSPI == TRUE && defined(HAL_QSPI_DEVICE_LIST)
static ESP32::QSPIDeviceManager qspiDeviceManager;
#endif

#if HAL_WITH_IO_MCU
HAL_UART_IO_DRIVER;
#include <AP_IOMCU/AP_IOMCU.h>
AP_IOMCU iomcu(uart_io);
#endif

extern const AP_HAL::HAL& hal;

HAL_ESP32::HAL_ESP32() :
    AP_HAL::HAL(
        &uartADriver, //Console/mavlink
        &uartBDriver, //GPS 1
        &uartCDriver, //Telem 1
        &uartDDriver, //Telem 2
        &uartEDriver, //GPS 2
        &uartFDriver, //Extra 1
        &uartGDriver, //Extra 2
        &uartHDriver, //Extra 3
        &uartIDriver, //Extra 4
        &uartJDriver, //Extra 5
        &i2cDeviceManager,
        &spiDeviceManager,
        nullptr,
        &analogIn,
        &storageDriver,
        &uartADriver,
        &gpioDriver,
        &rcinDriver,
        &rcoutDriver,
        &schedulerInstance,
        &utilInstance,
        &opticalFlowDriver,
        &flashDriver,
        &dspDriver,
        nullptr
    )
{}

void HAL_ESP32::run(int argc, char * const argv[], Callbacks* callbacks) const
{
    ((ESP32::Scheduler *)hal.scheduler)->set_callbacks(callbacks);
    hal.scheduler->init();
    hal.console->printf("\n%s:%d scheduler init() done\n", __PRETTY_FUNCTION__, __LINE__);
}

void AP_HAL::init()
{
}

#endif
